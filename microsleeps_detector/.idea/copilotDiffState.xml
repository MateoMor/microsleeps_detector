<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/microsleeps_detector/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/microsleeps_detector/MainActivity.kt" />
              <option name="originalContent" value="package com.example.microsleeps_detector&#10;&#10;import android.os.Bundle&#10;import com.google.android.material.snackbar.Snackbar&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import com.example.microsleeps_detector.databinding.ActivityMainBinding&#10;import com.google.mediapipe.tasks.vision.core.RunningMode&#10;&#10;class MainActivity : AppCompatActivity(), FaceLandmarkerHelper.LandmarkerListener {&#10;&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    // Exponer el helper para que lo use el fragmento de cámara&#10;    lateinit var faceHelper: FaceLandmarkerHelper&#10;        private set&#10;&#10;    // Listener delegado hacia el fragmento activo (p.ej., CameraFragment)&#10;    private var landmarkerDelegate: FaceLandmarkerHelper.LandmarkerListener? = null&#10;&#10;    fun setLandmarkerListener(listener: FaceLandmarkerHelper.LandmarkerListener?) {&#10;        landmarkerDelegate = listener&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.toolbar)&#10;&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        appBarConfiguration = AppBarConfiguration(navController.graph)&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;&#10;        // Inicializar FaceLandmarkerHelper en modo LIVE_STREAM&#10;        faceHelper = FaceLandmarkerHelper(&#10;            // Valores por defecto, puedes ajustarlos luego si quieres&#10;            runningMode = RunningMode.LIVE_STREAM,&#10;            context = this,&#10;            faceLandmarkerHelperListener = this&#10;        )&#10;&#10;        binding.fab.setOnClickListener { view -&gt;&#10;            Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)&#10;                .setAction(&quot;Action&quot;, null)&#10;                .setAnchorView(R.id.fab).show()&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        // Inflate the menu; this adds items to the action bar if it is present.&#10;        menuInflater.inflate(R.menu.menu_main, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        // Handle action bar item clicks here. The action bar will&#10;        // automatically handle clicks on the Home/Up button, so long&#10;        // as you specify a parent activity in AndroidManifest.xml.&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; true&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        return navController.navigateUp(appBarConfiguration)&#10;                || super.onSupportNavigateUp()&#10;    }&#10;&#10;    // Implementación del listener: reenviar a quien esté suscrito desde el fragmento&#10;    override fun onError(error: String, errorCode: Int) {&#10;        landmarkerDelegate?.onError(error, errorCode)&#10;    }&#10;&#10;    override fun onResults(resultBundle: FaceLandmarkerHelper.ResultBundle) {&#10;        landmarkerDelegate?.onResults(resultBundle)&#10;    }&#10;&#10;    override fun onEmpty() {&#10;        landmarkerDelegate?.onEmpty()&#10;    }&#10;&#10;    // NUEVO: reenviar análisis (EAR/cabeceo) al fragmento activo&#10;    override fun onAnalysis(result: FaceAnalysis.Result) {&#10;        landmarkerDelegate?.onAnalysis(result)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        if (!this::faceHelper.isInitialized) return&#10;        // Liberar recursos del helper&#10;        faceHelper.clearFaceLandmarker()&#10;    }&#10;&#10;    fun isFaceHelperReady(): Boolean =&#10;        this::faceHelper.isInitialized &amp;&amp; !faceHelper.isClose()&#10;&#10;    fun faceHelperOrNull(): FaceLandmarkerHelper? =&#10;        if (isFaceHelperReady()) faceHelper else null&#10;}" />
              <option name="updatedContent" value="package com.example.microsleeps_detector&#10;&#10;import android.os.Bundle&#10;import com.google.android.material.snackbar.Snackbar&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import com.example.microsleeps_detector.databinding.ActivityMainBinding&#10;import com.google.mediapipe.tasks.vision.core.RunningMode&#10;&#10;class MainActivity : AppCompatActivity(), FaceLandmarkerHelper.LandmarkerListener {&#10;&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    // Exponer el helper para que lo use el fragmento de cámara&#10;    lateinit var faceHelper: FaceLandmarkerHelper&#10;        private set&#10;&#10;    // Listener delegado hacia el fragmento activo (p.ej., CameraFragment)&#10;    private var landmarkerDelegate: FaceLandmarkerHelper.LandmarkerListener? = null&#10;&#10;    fun setLandmarkerListener(listener: FaceLandmarkerHelper.LandmarkerListener?) {&#10;        landmarkerDelegate = listener&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.toolbar)&#10;&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        appBarConfiguration = AppBarConfiguration(navController.graph)&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;&#10;        // Inicializar FaceLandmarkerHelper en modo LIVE_STREAM&#10;        faceHelper = FaceLandmarkerHelper(&#10;            // Valores por defecto, puedes ajustarlos luego si quieres&#10;            runningMode = RunningMode.LIVE_STREAM,&#10;            context = this,&#10;            faceLandmarkerHelperListener = this&#10;        )&#10;&#10;        binding.fab.setOnClickListener { view -&gt;&#10;            Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)&#10;                .setAction(&quot;Action&quot;, null)&#10;                .setAnchorView(R.id.fab).show()&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        // Inflate the menu; this adds items to the action bar if it is present.&#10;        menuInflater.inflate(R.menu.menu_main, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        // Handle action bar item clicks here. The action bar will&#10;        // automatically handle clicks on the Home/Up button, so long&#10;        // as you specify a parent activity in AndroidManifest.xml.&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; true&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        return navController.navigateUp(appBarConfiguration)&#10;                || super.onSupportNavigateUp()&#10;    }&#10;&#10;    // Implementación del listener: reenviar a quien esté suscrito desde el fragmento&#10;    override fun onError(error: String, errorCode: Int) {&#10;        landmarkerDelegate?.onError(error, errorCode)&#10;    }&#10;&#10;    override fun onResults(resultBundle: FaceLandmarkerHelper.ResultBundle) {&#10;        landmarkerDelegate?.onResults(resultBundle)&#10;    }&#10;&#10;    override fun onEmpty() {&#10;        landmarkerDelegate?.onEmpty()&#10;    }&#10;&#10;    // NUEVO: reenviar análisis (EAR/cabeceo) al fragmento activo&#10;    override fun onAnalysis(result: FaceAnalysis.Result) {&#10;        landmarkerDelegate?.onAnalysis(result)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        if (!this::faceHelper.isInitialized) return&#10;        // Liberar recursos del helper&#10;        faceHelper.clearFaceLandmarker()&#10;    }&#10;&#10;    fun isFaceHelperReady(): Boolean =&#10;        this::faceHelper.isInitialized &amp;&amp; !faceHelper.isClose()&#10;&#10;    fun faceHelperOrNull(): FaceLandmarkerHelper? =&#10;        if (isFaceHelperReady()) faceHelper else null&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/microsleeps_detector/ui/LabelsRenderer.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/microsleeps_detector/ui/LabelsRenderer.kt" />
              <option name="originalContent" value="package com.example.microsleeps_detector.ui&#10;&#10;import android.os.Handler&#10;import android.os.Looper&#10;import com.example.microsleeps_detector.FaceAnalysis&#10;import com.example.microsleeps_detector.databinding.FragmentCameraBinding&#10;&#10;class LabelsRenderer(&#10;    private val binding: FragmentCameraBinding&#10;) {&#10;    private val main = Handler(Looper.getMainLooper())&#10;&#10;    fun render(result: FaceAnalysis.Result) = onMain {&#10;        binding.labelPrimary.text = &quot;EAR: %.2f&quot;.format(result.earAverage)&#10;        binding.labelSecondary.text = &quot;Nods: ${result.totalNods}&quot;&#10;        // Build a simple status from analysis fields&#10;        val status = buildString {&#10;            append(if (result.eyesClosed) &quot;Ojos cerrados&quot; else &quot;Ojos abiertos&quot;)&#10;            if (result.isNodEvent) {&#10;                append(&quot; · Cabeceo #${result.totalNods}&quot;)&#10;            }&#10;        }&#10;        binding.labelBottom.text = status&#10;    }&#10;&#10;    fun setStatus(text: String) = onMain {&#10;        binding.labelBottom.text = text&#10;    }&#10;&#10;    private inline fun onMain(crossinline block: () -&gt; Unit) {&#10;        if (Looper.myLooper() == Looper.getMainLooper()) block() else main.post { block() }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.microsleeps_detector.ui&#10;&#10;import android.os.Handler&#10;import android.os.Looper&#10;import com.example.microsleeps_detector.FaceAnalysis&#10;import com.example.microsleeps_detector.databinding.FragmentCameraBinding&#10;&#10;class LabelsRenderer(&#10;    private val binding: FragmentCameraBinding&#10;) {&#10;    private val main = Handler(Looper.getMainLooper())&#10;&#10;    fun render(result: FaceAnalysis.Result) = onMain {&#10;        binding.labelPrimary.text = &quot;EAR: %.2f&quot;.format(result.earAverage)&#10;        binding.labelSecondary.text = &quot;Nods: ${result.totalNods}&quot;&#10;        // Build a simple status from analysis fields&#10;        val status = buildString {&#10;            append(if (result.eyesClosed) &quot;Ojos cerrados&quot; else &quot;Ojos abiertos&quot;)&#10;            if (result.isNodEvent) {&#10;                append(&quot; · Cabeceo #${result.totalNods}&quot;)&#10;            }&#10;        }&#10;        binding.labelBottom.text = status&#10;    }&#10;&#10;    fun setStatus(text: String) = onMain {&#10;        binding.labelBottom.text = text&#10;    }&#10;&#10;    private inline fun onMain(crossinline block: () -&gt; Unit) {&#10;        if (Looper.myLooper() == Looper.getMainLooper()) block() else main.post { block() }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>